package components

import "nous/internal/models"

templ ChatPage(sessionID, chatID string, chats []*models.Chat, query string) {
	@BaseLayout("Nous - Chat") {
		<div id="chat-messages" class="flex-grow overflow-y-auto mb-4 space-y-4">
			for _, chat := range chats {
				if chat.Type == "user" {
					@UserMessage(chat.Text)
				} else {
					@BotMessage(chat.Text)
				}
			}
		</div>
		<div id="overlay" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 z-50 flex justify-center items-center">
			<div class="bg-gray-800 rounded-lg p-6 flex flex-col items-center">
				<div class="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-primary-500 mb-4"></div>
				<p class="text-primary-300 font-semibold">Thinking...</p>
			</div>
		</div>
		<div class="w-full max-w-2xl mx-auto">
			<form
				id="chat-form"
				hx-post={ "/chat/" + chatID }
				hx-target="#chat-messages"
				hx-swap="beforeend"
				class="relative"
			>
				<input type="hidden" name="sid" value={ sessionID }/>
				<input
					id="chat-input"
					type="text"
					name="query"
					value={ query }
					placeholder="Ask me anything..."
					class="w-full py-4 px-6 bg-gray-800 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 transition duration-300 shadow-lg"
					required
				/>
				<button
					id="submit-button"
					type="submit"
					class="absolute right-3 top-1/2 transform -translate-y-1/2 bg-primary-600 text-white p-2 rounded-full hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 transition duration-300"
				>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						class="h-6 w-6"
						fill="none"
						viewBox="0 0 24 24"
						stroke="currentColor"
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
						></path>
					</svg>
				</button>
			</form>
		</div>
		<script>
            // Function to get URL parameters
            function getUrlParameter(name) {
                name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                return results === null
                    ? ""
                    : decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            // Function to remove URL parameters
            function removeUrlParameters() {
                window.history.replaceState(
                    {},
                    document.title,
                    window.location.pathname,
                );
            }

            // Scroll to bottom after new messages are added
            document.body.addEventListener("htmx:afterSwap", function (event) {
                var chatMessages = document.getElementById("chat-messages");
                chatMessages.scrollTop = chatMessages.scrollHeight;
                addCopyListeners();
            });

            // Show loader on form submission
            document
                .getElementById("chat-form")
                .addEventListener("htmx:beforeRequest", function (event) {
                    document.getElementById("chat-input").value = "";
                    document
                        .getElementById("submit-button")
                        .classList.add("hidden");
                    document
                        .getElementById("overlay")
                        .classList.remove("hidden");
                });

            // Hide loader after response is received
            document.body.addEventListener("htmx:afterSwap", function (event) {
                document
                    .getElementById("submit-button")
                    .classList.remove("hidden");
                document.getElementById("overlay").classList.add("hidden");
            });

            // Function to remove all "Copied!" spans
            function removeCopiedSpans() {
                document
                    .querySelectorAll(".copied-span")
                    .forEach((span) => span.remove());
            }

            // Function to add copy listeners to all copy buttons
            function addCopyListeners() {
                document.querySelectorAll(".copy-btn").forEach((btn) => {
                    btn.addEventListener("click", function () {
                        removeCopiedSpans();
                        const text =
                            this.parentElement.querySelector("p").textContent;
                        navigator.clipboard.writeText(text).then(() => {
                            const copiedSpan = document.createElement("span");
                            copiedSpan.textContent = "Copied!";
                            copiedSpan.className =
                                "copied-span text-xs absolute top-2 right-8 bg-gray-800 text-white px-2 py-1 rounded";
                            this.parentElement.appendChild(copiedSpan);
                            setTimeout(() => copiedSpan.remove(), 1000);
                        });
                    });
                });
            }

            addCopyListeners();

            // Add event listener for Cmd+K
            document.addEventListener("keydown", function (e) {
                if ((e.metaKey || e.ctrlKey) && e.key === "k") {
                    e.preventDefault();
                    document.getElementById("chat-input").focus();
                }
            });

            // Handle initial load, URL parameters, and form submission
            window.addEventListener("load", function () {
                const chatForm = document.getElementById("chat-form");
                const chatInput = document.getElementById("chat-input");
                const sessionIdInput =
                    document.querySelector('input[name="sid"]');

                const urlQuery = getUrlParameter("query");
                const urlSessionId = getUrlParameter("sid");

                const storedSessionId = sessionStorage.getItem(
                    "sessionId",
                    urlSessionId,
                );
                const chatExists = sessionStorage.getItem("chatExists");
                const makeRequest = !storedSessionId && !chatExists;
                if (!makeRequest) {
                    return;
                }

                if (urlSessionId) {
                    sessionStorage.setItem("sessionId", urlSessionId);
                    sessionIdInput.value = urlSessionId;
                } else {
                    if (storedSessionId) {
                        sessionIdInput.value = storedSessionId;
                    }
                }

                if (urlQuery) {
                    chatInput.value = urlQuery;
                    removeUrlParameters();

                    // Submit the form
                    const formData = new FormData(chatForm);
                    fetch(chatForm.getAttribute("hx-post"), {
                        method: "POST",
                        body: formData,
                    })
                        .then((response) => response.text())
                        .then((html) => {
                            document
                                .getElementById("chat-messages")
                                .insertAdjacentHTML("beforeend", html);
                            chatInput.value = "";
                            document.getElementById("chat-messages").scrollTop =
                                document.getElementById(
                                    "chat-messages",
                                ).scrollHeight;
                            addCopyListeners();
                        })
                        .catch((error) => console.error("Error:", error))
                        .finally(() => {
                            sessionStorage.setItem("chatExists", true);
                            document
                                .getElementById("submit-button")
                                .classList.remove("hidden");
                            document
                                .getElementById("overlay")
                                .classList.add("hidden");
                        });
                }
            });
        </script>
	}
}
